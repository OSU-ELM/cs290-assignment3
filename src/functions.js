/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction() {
    return null;
}
//end your code


var bar = 'not a function';
var barType = typeof bar;

/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here
bar = function (doubleArray) {
    var i = 0; //used for looping
    for (i = 0; i < doubleArray.length; i++) { //loops through each node to double value, returns 'false' in case of failure
        if (typeof doubleArray[i] !== "number") { //catches non-numbers that can't be doubled
            return false;
        }
        doubleArray[i] *= 2;
    }
    return true;
};
//end your code

/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/
var GitLog = function (hash, date, message) {
    this.hash = hash;
    this.date = date;
    this.message = message;
};

    /**
    * Create a function called parseGit to parse Git commit logs
    * The logs will be generated by the following command
    * git log --pretty=format:"%h %ad \"%s\"" --date=rfc
    * The result looks like this
    * 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
    * |hash | |             date           | |   message    |
    * There will always be a space between the hash and date and between the date
    * and the first " of the commit message.
    *
    * You will covert these into GitLog objects with the following properties:
    *
    *
    * @param {array.<string>} logArray - an array of Git commit messages of the
    * above
    * format.
    * @return {array.<GitLog>} - return an array GitLog instances
    */

    //your code here
function parseGit(logArray) {
    /*
    Notes and references: 
    
    I has a LOT of trouble with this part of the code, and had to rely heavily on
    outside sources in order to get the proper syntax. Below are my sources.
    
    At first I tried getting the date using the string.split() method which wasn't working out. 
    After an hour+ or so of playing around with it, I noticed the my classmate "Frank Eslami" had also 
    had trouble with this function and posted about it on the 'Week 3 technical Discussion' thread on 1/23.

    Unlike my code however, he had used the 'string.slash()' syntax and that allowed him to properly parse
    the hash and date. After looking up what the'slice' syntax did, I borrowed it for my own code in a 
    similar manner to what Frank Eslami wrote and got the 'hash' and 'message' parts of the function to work.
    I also liked his use of a new Array declaration for this function and borrowed that as well.

    One thing he did not have was the proper date. For that I looked on google and got help from
    this Mozilla Developer NetWork article: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime

    So in summation my code sources are:

    New array (logarray.length): Frank Eslami (01/23 Week 3 technical Discussion)
    string.slice(): Frank Eslami (01/23 Week 3 technical Discussion)
    Date coding: Mozilla Developer Network ( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
    */
    var i = 0; //for loops
    var add_date = new Date; //used to pass date values
    Gitty = new Array(logArray.length); //new empty array of same size as parameter argument array.
    for (i = 0; i < logArray.length; i++) {
        add_date = new Date (logArray[i].slice(8,38));
        Gitty[i] = new GitLog(logArray[i].slice(0, 7), add_date, logArray[i].slice(40, logArray.lastIndexOf()));
    }
    return Gitty; //return array after adding new index
}
    //end your code
